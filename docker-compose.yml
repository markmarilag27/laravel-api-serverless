# https://docs.docker.com/compose/compose-file/compose-file-v3/
version: '3.8'
# Services
services:

    # APP
    app:
        build:
            context: ./.docker
            dockerfile: Dockerfile
        image: markmarilag27/laravel-api-serverless:latest
        container_name: app
        restart: unless-stopped
        tty: true
        ports:
          - 80:80
          - 443:443
        volumes:
            - ./:/var/www/html
            - ./.docker/Caddyfile:/etc/caddy/Caddyfile
            - ./.docker/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
            - ./.docker/fpm-pool.conf:/etc/php/8.1/fpm/pool.d/www.conf
            - ./.docker/php.ini:/etc/php/8.1/fpm/conf.d/99-sail.ini
        networks:
            - default

    # Database
    mysql:
        image: mysql:8
        container_name: mysql
        command: --default-authentication-plugin=mysql_native_password
        restart: unless-stopped
        ports:
            - ${DB_PORT:-3306}:3306
        environment:
            MYSQL_ROOT_PASSWORD: password
        volumes:
            - ./.docker/mysql-init:/docker-entrypoint-initdb.d
            - mysql-data:/var/lib/mysql/
        networks:
            - default

    # Dynamodb UI and DB
    dynamodb:
        image: instructure/dynamo-local-admin:latest
        container_name: dynamodb
        restart: unless-stopped
        ports:
            - 8001:8001
            - 8002:8002
        environment:
            DYNAMO_ENDPOINT: ${DYNAMODB_ENDPOINT_LOCAL:-http://localhost:8001}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-laravel}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-password}
            AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-ap-southeast-1}
            AWS_REGION: ${AWS_DEFAULT_REGION:-ap-southeast-1}
        volumes:
            - dynamodb-data:/var/lib/dynamodb
        networks:
            - default

    # AWS Cli
    aws-cli:
        image: amazon/aws-cli:latest
        container_name: aws-cli
        command: dynamodb --endpoint-url http://dynamodb:8002 create-table --table-name laravel_cache --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=3,WriteCapacityUnits=3 --region ${AWS_DEFAULT_REGION:-ap-southeast-1}
        depends_on:
            - dynamodb
        environment:
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-laravel}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-password}
            AWS_REGION: ${AWS_DEFAULT_REGION:-ap-southeast-1}
        networks:
            - default

    # ElasticMQ
    sqs:
        image: softwaremill/elasticmq:latest
        container_name: sqs
        restart: unless-stopped
        stdin_open: true
        tty: true
        ports:
            - 9324:9324
            - 9325:9325
        volumes:
            - ./.docker/elasticmq.conf:/opt/elasticmq.conf
            - sqs-data:/data
        networks:
            - default

    # Mail
    mailhog:
        image: mailhog/mailhog
        container_name: mailhog
        restart: unless-stopped
        ports:
            - ${MAIL_PORT:-1025}:1025
            - 8025:8025
        networks:
            - default

    # Minio Server
    minio:
        image: minio/minio:latest
        container_name: minio
        command: minio server /data --console-address ":9090"
        ports:
            - 9000:9000
            - 9090:9090
        environment:
            - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID:-laravel}
            - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY:-password}
        volumes:
            - minio-data:/data
        networks:
            - default

    # Minio MC
    minio-mc:
        image: minio/mc:latest
        container_name: minio-mc
        restart: on-failure
        depends_on:
            - minio
        entrypoint: >
            /bin/sh -c "
            /usr/bin/mc alias set client http://minio:9000 ${AWS_ACCESS_KEY_ID:-laravel} ${AWS_SECRET_ACCESS_KEY:-password};
            /usr/bin/mc mb client/${AWS_BUCKET:-local-bucket};
            /usr/bin/mc policy set public client/${AWS_BUCKET:-local-bucket};
            "
        networks:
            - default

# Networks
networks:
    default:
        driver: bridge

# Volumes
volumes:
    mysql-data:
        driver: local
    minio-data:
        driver: local
    sqs-data:
        driver: local
    dynamodb-data:
        driver: local
